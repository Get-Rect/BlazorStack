@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager _nav;


<AuthorizeView>
    <Authorized>
        <div class="nav-menu">
            <div class="page-link" @onclick="@(() => _nav.NavigateTo("/"))">
                <i class="fa-solid fa-house"></i><span>@(isNavMenuCollapsed ? "" : "Home ")</span>
            </div>
            @if (context.User.IsInRole("Admin"))
            {
                <div class="page-link" @onclick="@(() => _nav.NavigateTo("/users"))">
                    <i class="fa-solid fa-users"></i><span>@(isNavMenuCollapsed ? "" : "Users ")</span>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="nav-menu">
            <div class="page-link" @onclick="@(() => _nav.NavigateTo("/"))">
                <i class="fa-solid fa-house"></i><span>@(isNavMenuCollapsed ? "" : "Home ")</span>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


<button class="collapse-menu" @onclick="ToggleNavMenu"><i class="fa-solid fa-arrow-@(isNavMenuCollapsed ? "right" : "left")"></i></button>

@code {
    [Parameter]
    public EventCallback OnCollapseMenu { get; set; }

    private bool isNavMenuCollapsed = false;


    private async Task ToggleNavMenu()
    {
        isNavMenuCollapsed = !isNavMenuCollapsed;
        await OnCollapseMenu.InvokeAsync();
    }
}
