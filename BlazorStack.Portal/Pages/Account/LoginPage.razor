@using BlazorStack.Services
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization

@page "/login"
@layout LoginLayout
@inject ApplicationAPIService _api;
@inject ILocalStorageService _localStorage;
@inject NavigationManager _nav;
@inject AuthenticationStateProvider _state;


<div class="login-card">
    <PageTitle>Login</PageTitle>
    @if (errors)
    {
        @foreach (var error in errorList)
        {
            <div class="alert alert-danger">@error</div>
        }
    }

    <div class="flex-outer">
        <div class="form-group">
            <input class="form-field" required id="email" name="emailInput" placeholder="Email" type="email" @bind-value="email" />
        </div>
        <div class="form-group">
            <input class="form-field" required id="password" name="passwordInput" placeholder="Password" type="password" @bind-value="password" />
        </div>
        <div>
            <button class="btn btn-primary" @onclick="DoLoginAsync">Login</button>
        </div>
    </div>
</div>

@code {
    private bool success, errors;
    private string email = string.Empty;
    private string password = string.Empty;
    private string[] errorList = [];

    public async Task DoLoginAsync()
    {
        success = errors = false;
        errorList = [];

        if (string.IsNullOrWhiteSpace(email))
        {
            errors = true;
            errorList = ["Email is required."];

            return;
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            errors = true;
            errorList = ["Password is required."];

            return;
        }

        var loginResponse = await _api.Login(email, password);
        await _localStorage.SetItemAsStringAsync("token", loginResponse?.AccessToken ?? string.Empty);
        _nav.NavigateTo(_nav.BaseUri);
    }
}