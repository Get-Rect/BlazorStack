@using BlazorStack.Services
@using BlazorStack.Services.Models
@using BlazorStack.Portal.Components
@using Microsoft.AspNetCore.Authorization

@page "/users/{Id}"
@inject ApplicationAPIService _api;
@attribute [Authorize]

<div class="scrollable-card">
    @if (userDetails == null)
    {
        <p>Loading user details...</p>
    }
    else
    {
        <div class="row">
            <div class="user-photo" @onclick="AdminUploadPhoto">
                <img src="@(!string.IsNullOrEmpty(userDetails.PhotoUrl) ? @userDetails.PhotoUrl : "/img/defaultUserPhoto.png")" alt="User Photo" />
            </div>
            <div class="user-details">
                <div class="user-detail">
                    <div class="icon-field w-200">
                        <i class="text-primary fa-solid fa-envelope"></i>
                        @userDetails.Email
                    </div>
                    @if (viewingUserIsAdmin)
                    {
                        <i class="pointer text-primary fa-solid fa-pencil"></i>
                    }
                </div>
                <div class="user-detail">
                    @if (!string.IsNullOrEmpty(userDetails.Role))
                    {
                        <div class="badge">
                            <i class="icon-left fa-solid fa-id-badge"></i>
                            <span class="text-right">@userDetails.Role</span>
                        </div>
                    }

                    @if (viewingUserIsAdmin)
                    {
                        <i @onclick="@ToggleRoleModal" class="pointer text-primary fa-solid fa-pencil"></i>
                    }
                </div>
            </div>
            @if (viewingUserIsAdmin)
            {
                <div class="user-actions">
                    <button @onclick="ToggleRoleModal">Update Role</button>
                    <button @onclick="TogglePasswordModal">Change Password</button>
                </div>
            }
        </div>
    }
</div>

<Modal @bind-IsVisible="showRoleModal" OnSubmit="HandleRoleSubmit" Title="Update User Role">
    <ChildContent>
        <div class="modal-body">
            <select @bind="newRole">
                <option value="">No Role</option>
                @foreach (var role in roles)
                {
                    <option value="@role">@role</option>
                }
            </select>
        </div>
    </ChildContent>
</Modal>

<Modal @bind-IsVisible="showPasswordModal" Title="Update Password" OnSubmit="HandlePasswordSubmit">
    <ChildContent>
        <div class="modal-body">
            <input type="password" placeholder="New Password" @bind="newPassword">
        </div>
    </ChildContent>
</Modal>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private readonly string DefaultPhotoUrl = "Some file in wwwroot.";

    private UserDetailsViewModel? userDetails;

    private bool viewingUserIsAdmin = false;
    private bool showRoleModal = false;
    private bool showPasswordModal = false;
    private string newRole = string.Empty;
    private string newPassword = string.Empty;

    private List<string> roles = new List<string>();

    private async Task HandleRoleSubmit()
    {
        // send request to update use rrole to api
        // update page with new user data
        // show notification of success or failure
        ToggleRoleModal();
    }

    private async Task HandlePasswordSubmit()
    {
        // send request to update user password
        // show notification of success or failure
        TogglePasswordModal();
    }

    private void ToggleRoleModal()
    {
        showRoleModal = !showRoleModal;
    }

    private void TogglePasswordModal()
    {
        showPasswordModal = !showPasswordModal;
    }

    protected override async Task OnInitializedAsync()
    {
        roles = await _api.GetAllRoles() ?? new();
        userDetails = await _api.GetUser(Id);
        newRole = userDetails?.Role ?? string.Empty;

        viewingUserIsAdmin = CheckIsAdmin();
    }

    private bool CheckIsAdmin()
    {
        return true;
    }

    private void AdminUploadPhoto()
    {

    }

    private void EditUserInfo()
    {

    }
}
