@using BlazorStack.Portal.Services
@using BlazorStack.Services
@using BlazorStack.Services.Extensions
@using BlazorStack.Services.Models
@using BlazorStack.Portal.Components
@using BlazorStack.Services.Models.ViewModels
@using Microsoft.AspNetCore.Authorization

@page "/users/{Id}"
@inject ApplicationAPIService _api;
@inject NotificationService _notifications;
@attribute [Authorize]

<div class="scrollable-card">
    @if (userDetails == null || isBusy)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="row">
            <div class="user-photo" @onclick="AdminUploadPhoto">
                <img src="@(!string.IsNullOrEmpty(userDetails.PhotoUrl) ? userDetails.PhotoUrl.AddTimestampQueryString() : "/img/defaultUserPhoto.png")" alt="User Photo">
                <InputFile type="file" OnChange="@(async (InputFileChangeEventArgs args) => await HandleFileSelected(args))" />
            </div>
            <div class="user-details">
                <div class="user-detail">
                    <div class="icon-field w-200">
                        <div class="inner">
                            <i class="text-primary fa-solid fa-envelope"></i>
                            <span>@userDetails.Email</span>
                        </div>
                    </div>
                </div>
                <div class="user-detail">
                    @if (!string.IsNullOrEmpty(userDetails.Role))
                    {
                        <div class="badge">
                            <i class="icon-left fa-solid fa-id-badge"></i>
                            <span class="text-right">@userDetails.Role</span>
                        </div>
                    }
                </div>
            </div>
        </div>
        @if (viewingUserIsAdmin)
        {
            <div class="user-actions">
                <button @onclick="ToggleRoleModal">Update Role</button>
                <button @onclick="TogglePasswordModal">Change Password</button>
            </div>
        }
    }
</div>

<Modal @bind-IsVisible="showRoleModal" OnSubmit="HandleRoleSubmit" Title="Update User Role">
    <ChildContent>
        <select class="rounded" @bind="newRole">
            <option value="">No Role</option>
            @foreach (var role in roles)
            {
                <option value="@role">@role</option>
            }
        </select>
    </ChildContent>
</Modal>

<Modal @bind-IsVisible="showPasswordModal" Title="Update Password" OnSubmit="HandlePasswordSubmit">
    <ChildContent>
        <input type="password" placeholder="New Password" @bind="newPassword">
    </ChildContent>
</Modal>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private UserDetailsViewModel? userDetails;
    private bool viewingUserIsAdmin = false;
    private bool showRoleModal = false;
    private bool showPasswordModal = false;
    private bool isBusy = false;
    private string newRole = string.Empty;
    private string newPassword = string.Empty;

    private List<string> roles = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshRoles();
        await RefreshUser();
        viewingUserIsAdmin = CheckIsAdmin();
    }

    private async Task RefreshUser()
    {
        var response = await _api.GetUser(Id);
        if (response?.IsSuccess == true)
        {
            userDetails = response?.Data ?? new();
            newRole = userDetails?.Role ?? string.Empty;
        }
        else
        {
            _notifications.ShowErrors(response?.Errors ?? new List<string>() { "Failed to process response." });
        }
    }

    private async Task RefreshRoles()
    {
        var response = await _api.GetAllRoles();
        if (response?.IsSuccess == true)
        {
            roles = response?.Data ?? new();
        }
        else
        {
            _notifications.ShowErrors(response?.Errors ?? new List<string>() { "Failed to process response." });
        }
    }

    private async Task HandleRoleSubmit()
    {
        var response = await _api.UpdateRole(Id, newRole);
        if (!response?.IsSuccess == true) _notifications.ShowErrors(response?.Errors ?? new List<string>() { "Failed to update role." });
        else
        {
            _notifications.ShowNotification("Successfully updated role", Models.NotificationType.Success);
            ToggleRoleModal();
        }
        await RefreshUser();
    }

    private async Task HandlePasswordSubmit()
    {
        var response = await _api.ChangePassword(Id, newPassword);
        if (!response?.IsSuccess == true) _notifications.ShowErrors(response?.Errors ?? new List<string>() { "Failed to update password." });
        else
        {
            _notifications.ShowNotification("Successfully updated password", Models.NotificationType.Success);
            TogglePasswordModal();
        }
    }

    private void ToggleRoleModal()
    {
        newRole = userDetails?.Role ?? string.Empty;
        showRoleModal = !showRoleModal;
    }

    private void TogglePasswordModal()
    {
        newPassword = string.Empty;
        showPasswordModal = !showPasswordModal;
    }

    private bool CheckIsAdmin()
    {
        return true;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        isBusy = true;
        var file = e.File;
        if (file != null)
        {
            using (var stream = file.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    var base64 = Convert.ToBase64String(memoryStream.ToArray());
                    var result = await _api.UploadProfilePhoto(Id, base64);
                    if (result?.IsSuccess == true)
                    {
                        // introduce a slight delay so we can get the latest image from blob storage.
                        await Task.Delay(200);
                        _notifications.ShowSuccess("Photo uploaded successfully.");
                        await RefreshUser();
                    }
                    else
                    {
                        _notifications.ShowErrors(result?.Errors ?? new List<string>() { "Unknown error occurred while uploading photo." });
                    }
                }
            }
        }
        isBusy = false;
    }

    private void AdminUploadPhoto()
    {

    }

    private void EditUserInfo()
    {

    }
}
