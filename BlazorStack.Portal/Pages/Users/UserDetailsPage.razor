@using BlazorStack.Services
@using BlazorStack.Services.Models
@using Microsoft.AspNetCore.Authorization

@page "/users/{Id}"
@inject ApplicationAPIService _api;
@attribute [Authorize]

<div class="scrollable-card">
    @if (userDetails == null)
    {
        <p>Loading user details...</p>
    }
    else
    {
        <div class="row">
            <div class="user-photo" @onclick="AdminUploadPhoto">
                <img src="@(!string.IsNullOrEmpty(userDetails.PhotoUrl) ? @userDetails.PhotoUrl : "/img/defaultUserPhoto.png")" alt="User Photo" />
            </div>
            <div class="user-details">
                <div class="user-detail">
                    <div class="icon-field w-200">
                        <i class="text-primary fa-solid fa-envelope"></i>
                        @userDetails.Email
                    </div>
                    @if (viewingUserIsAdmin)
                    {
                        <i class="pointer text-primary fa-solid fa-pencil"></i>
                    }
                </div>
                <div class="user-detail">
                    <div class="icon-field w-200">
                        <i class="text-primary fa-solid fa-id-badge"></i>
                        @userDetails.Role
                    </div>
                    @if (viewingUserIsAdmin)
                    {
                        <i @onclick="@ToggleModal" class="pointer text-primary fa-solid fa-pencil"></i>
                    }
                </div>

            </div>
        </div>
    }
</div>

@if (showModal)
{
    <div class="modal" style="display:block;">
        <div class="modal-content">
            <div class="modal-header" style="background-color: var(--primary);">
                <span>Change User Role</span>
                <span class="close" @onclick="ToggleModal">&times;</span>
            </div>
            <div class="modal-body">
                <select @bind="newRole">
                    <option value="">No Role</option>
                    @foreach (var role in roles)
                    {
                        <option value="@role">@role</option>
                    }
                </select>
            </div>
            <div class="modal-footer">
                <button @onclick="HandleSubmit">Submit</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private readonly string DefaultPhotoUrl = "Some file in wwwroot.";

    private UserDetailsViewModel? userDetails;

    private bool viewingUserIsAdmin = false;
    private bool showModal = false;
    private string newRole = string.Empty;

    private List<string> roles = new List<string>();

    private async Task HandleSubmit()
    {
        // send request to update use rrole to api
        // update page with new user data
        ToggleModal();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }

    protected override async Task OnInitializedAsync()
    {
        roles = await _api.GetAllRoles() ?? new();
        userDetails = await _api.GetUser(Id);
        newRole = userDetails?.Role ?? string.Empty;
        viewingUserIsAdmin = CheckIsAdmin();
    }

    private bool CheckIsAdmin()
    {
        return true;
    }

    private void AdminUploadPhoto()
    {

    }

    private void EditUserInfo()
    {

    }
}
