@using BlazorStack.Portal.Services
@using BlazorStack.Services
@using BlazorStack.Services.Models
@using BlazorStack.Portal.Components
@using Microsoft.AspNetCore.Authorization

@page "/users"
@inject ApplicationAPIService _api
@inject NavigationManager _nav;
@inject NotificationService _notifications;
@attribute [Authorize]

<div class="scrollable-card">
    <h3>Users</h3>

    <div class="filter-row">
        <!-- Add filter elements here -->
        <input class="rounded" type="text" placeholder="Search users..." @oninput="OnSearchChanged" />
        <button class="green" @onclick="ToggleModal"><i class="fa-solid fa-plus"></i></button>
    </div>

    <div class="users-list">
        <div class="list-header" style="z-index: 0">
            <span class="w-50">Photo</span>
            <span class="w-200">Email</span>
            <span class="w-100">Role</span>
            <span class="w-50">Actions</span>
        </div>
        @if (FilteredUsers is not null)
        {
            @foreach (var user in FilteredUsers)
            {
                <div class="user-card">
                    <div class="profile-photo w-50">
                        <img src="@(!string.IsNullOrEmpty(user.PhotoUrl) ? user.PhotoUrl : "/img/defaultUserPhoto.png")" />
                    </div>
                    <div class="w-200 hide-overflow">@user.Email</div>
                    <div class="w-100">@user.Role</div>
                    <div class="w-50 user-actions">
                        <i class="primary pointer fa-solid fa-eye" @onclick="() => ViewUser(user)"></i>
                        <i class="text-red pointer fa-solid fa-trash" @onclick="() => ShowDeleteModal(user)"></i>
                    </div>
                </div>
            }
        }
    </div>
</div>

<Modal Title="Create User" @bind-IsVisible="showModal" OnSubmit="HandleSubmit">
    <ChildContent>
        <input type="email" placeholder="Email" @bind="newUser.Email">
        <input type="password" placeholder="Password" @bind="newUser.Password">
        <select class="rounded" @bind="newUser.Role">
            <option value="">No Role</option>
            @foreach (var role in roles)
            {
                <option value="@role">@role</option>
            }
        </select>
    </ChildContent>
</Modal>

<Modal Title="Delete User" @bind-IsVisible="showDeleteModal" OnSubmit="DeleteUser">
    <ChildContent>
        <span>Are you sure you want to delete @(UserToDelete?.Email ?? "Something went wrong.")?</span>
    </ChildContent>
    </Modal>

@code {
    private UserViewModel newUser = new UserViewModel();
    private bool showModal = false;
    private bool showDeleteModal = false;
    private List<string> roles = new List<string>();
    private UserViewModel? UserToDelete;
    private List<UserViewModel>? Users = new List<UserViewModel>(); // Populate this list with your users
    private List<UserViewModel>? FilteredUsers => Users?.Where(u => u.FirstName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                         u.LastName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                         u.Email.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

    private string SearchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await RefreshUsers();
        await RefreshRoles();
    }

    private async Task RefreshUsers()
    {
        var response = await _api.GetUsers();
        if (response?.IsSuccess == true)
        {
            Users = response.Data;
        }
        else
        {
            _notifications.ShowErrorNotifications(response?.Errors ?? new List<string>() { "Failed to process response." });
        }
    }

    private async Task RefreshRoles()
    {
        var response = await _api.GetAllRoles();
        if (response?.IsSuccess == true)
        {
            roles = response?.Data ?? new();
        }
        else
        {
            _notifications.ShowErrorNotifications(response?.Errors ?? new List<string>() { "Failed to process response." });
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        if (e is null || e.Value is null) return;

        SearchQuery = e?.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void ViewUser(UserViewModel user)
    {
        _nav.NavigateTo($"/users/{user.Id}");
    }

    private void ShowDeleteModal(UserViewModel user)
    {
        UserToDelete = user;
        showDeleteModal = true;
    }

    private async Task DeleteUser()
    {
        if(UserToDelete is null)
        {
            _notifications.ShowNotification("User is null", Models.NotificationType.Error);
            return;
        }

        var response = await _api.DeleteUser(UserToDelete.Id);
        if (!response?.IsSuccess == true) _notifications.ShowErrorNotifications(response?.Errors ?? new List<string>() { "Failed to delete user." });
        else
        {
            _notifications.ShowNotification("Successfully deleted user.", Models.NotificationType.Success);
            await RefreshUsers();
        }
        UserToDelete = null;
        showDeleteModal = false;
    }

    private async Task HandleSubmit()
    {
        await _api.CreateUser(newUser);
        ToggleModal();
        await RefreshUsers();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }

}
