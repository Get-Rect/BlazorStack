@using BlazorStack.Services
@using BlazorStack.Services.Models
@using Microsoft.AspNetCore.Authorization

@page "/users"
@inject ApplicationAPIService _api
@inject NavigationManager _nav;
@attribute [Authorize]

<div class="scrollable-card">
    <h3>Users</h3>

    <div class="filter-row">
        <!-- Add filter elements here -->
        <input type="text" placeholder="Search users..." @oninput="OnSearchChanged" />
        <button @onclick="ToggleModal">Create New User</button>
    </div>

    <div class="users-list">
        <div class="header" style="z-index: 0">
            <span>Photo</span>
            <span>Email</span>
            <span>Role</span>
            <span>Actions</span>
        </div>
        @if (FilteredUsers is not null)
        {
            @foreach (var user in FilteredUsers)
            {
                <div class="user-card">
                    <div class="profile-photo">
                        <img src="@(!string.IsNullOrEmpty(user.PhotoUrl) ? user.PhotoUrl : "/img/defaultUserPhoto.png")" />
                    </div>
                    <div>@user.Email</div>
                    <div>@user.Role</div>
                    <div class="user-actions">
                        <i class="primary pointer fa-solid fa-eye" @onclick="() => ViewUser(user)"></i>
                    </div>
                </div>
            }
        }
    </div>
</div>

@if (showModal)
{
    <div class="modal" style="display:block;">
        <div class="modal-content">
            <div class="modal-header" style="background-color: var(--primary);">
                <span>Create a New User</span>
                <span class="close" @onclick="ToggleModal">&times;</span>
            </div>
            <div class="modal-body">
                <input type="email" placeholder="Email" @bind="newUser.Email">
                <input type="password" placeholder="Password" @bind="newUser.Password">
                <select @bind="newUser.Role">
                    <option value="">No Role</option>
                    @foreach (var role in roles)
                    {
                        <option value="@role">@role</option>
                    }
                </select>
            </div>
            <div class="modal-footer">
                <button @onclick="HandleSubmit">Submit</button>
            </div>
        </div>
    </div>
}

@code {
    private UserViewModel newUser = new UserViewModel();
    private bool showModal = false;
    private List<string> roles = new List<string>();
    private List<UserViewModel>? Users = new List<UserViewModel>(); // Populate this list with your users
    private List<UserViewModel>? FilteredUsers => Users?.Where(u => u.FirstName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                         u.LastName.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                         u.Email.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

    private string SearchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await RefreshUsers();
        roles = await _api.GetAllRoles() ?? new();
    }

    private async Task<List<UserViewModel>> RefreshUsers()
    {
        return Users = await _api.GetUsers() ?? new();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        if (e is null || e.Value is null) return;

        SearchQuery = e?.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private void ViewUser(UserViewModel user)
    {
        _nav.NavigateTo($"/users/{user.Id}");
    }

    private async Task HandleSubmit()
    {
        await _api.CreateUser(newUser);
        ToggleModal();
        await RefreshUsers();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }

}
